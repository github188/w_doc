hdu模块包括：hduclientlib, hdupool, hdu2(hdu2lib)
外部联系有：MCU, CSS，CM

hduclientlib提供给mcu使用。Mcu通过hduclientlib提供的api来操作hdu。通过回调函数来获取操作的结果信息。
hdupool是统筹所有hdu资源的资源池(不是纯粹的资源池,hdupool本身也有业务逻辑在其中）。
所有的hdu都要注册到hdupool。最早的时候是mcu直接控制hdu。但这会导致hdu资源的利用率不高。
Hdupool会缓存hdu的状态消息，上报给会馆和mcu并按照业务需求接收mcu和css的指令再转发给
Hdu.
hdu2(hdu2lib)是运行在hdu上的程序。hdu2lib包含medianet,mediaresource的库。Medianet库负责收取rtp, rtcp的数据包，
mediaresource库包含视频解码器和音频解码器，负责解码音视频码流。

因为既往mcu使用某个hdu通道是通过试能力来实现,第一次不成功hdupool会把最低需要怎样的能力发给hduclientlib。而如果hduclientlib能够提供通过HduId就能查询到该Hdu的所有能力，就能让hd一次就占用通道成功。

      在hduclientlib向hdupool注册时便将hdu类型及对应的能力集的信息发送给hduclientlib进行缓存。当hduclientlib在之后获取所有上线hdu时都带上该hdu的类型。通过缓存hduEqpId-hduType, hduType-能力集的映射就能够实现通过eqpId获取能力集。

	  
	  mcu组在拿到接口后便询问为什么分为两个接口，一个是获取限制能力集的接口，一个是获取特殊能力集的接口。Mcu并不知道什么是特殊能力，什么是限制能力。而我对限制能力和特殊能力的真正含义也是不了解。只是机械地按照字面含义提供接口而已。这会造成提供的接口很可能不是使用者需要的。应该在做接口需求的时候，先去具体细致地了解为什么需要这个接口，为了解决什么问题，如何使用这个接口。只有把这些都了解清楚了才能够有底气去完成接口。提供最优的解决办法。这在后面的提供接口的时候，避免了这次出现的问题。

	   MCU之前做批量轮询的时候，是根据当前可用的hdu通道进行预占。假设有5个终端4个通道，则预占的顺序是先预占4个通道，再释放预占4个通道，再预占1个通道，再释放1个通道。循环进行。而在此过程之中，通道可能被其他会议占用。

	   mcu提供多个通道信息。增加批量预占消息类型，一次性发送给hdupool。Hdupool统一预占后，将每个通道信息及预占结果发回给hduclientlib, 最后再一次性回调给mcu实现批量预占。
	   
	   目的是提供给会馆hdu的通道状态。会馆根据hdu当前的通道状态提供支持的通道操作和界面显示

	   
	   Hdupool维护有所有在线的hdu通道状态。只有在mcu(hduclientlib), 预占，释放预占，占用，占用成功，释放占用成功，切换四分屏，切换四分屏成功，切换一分屏成功时对通道状态有影响，分别在这些操作的时候上报CSS通道的状态，再由CSS根据通道状态是否有改变再决定是否上报给会馆。

	   修改说明:HDU通道被连续占用，状态不对。占用策略应改为占用的ACK也占用，释放则是收到ACK才释放
如果连续占用则MCU发消息的顺序是，占用；释放；占用
按时序，CSS收到消息的顺序是，占用（通道被占），占用ACK（通道被占），释放（通道被占），占用（通道被占用）， 释放ACK（通道被释放），占用ACK（此时通道应该是占用状态，但是按之前的考虑，占用请求的时候已经占用有通道了，则占用ACK的时候不再实际占用通道，但因为前条消息是释放ACK，通道被释放了，此时通道的状态是不正确的)
通道虽然实际上是被释放了，但释放前的状态是不占用的，则不上报给会馆了。所以只要在占用ACK的时候再实际占用通道就可以避免


第一次修改说明:
hdu重启，在hdu注册和hdu上报通道状态间隙，hdupool收到之前的占用成功ack消息，并在hdupool缓存通道被占用。这样的占用与HDU的实际占用情况是不一致的。且hdupool收到hdu第一次上报通道状态之后，才通知css通道上线。造成css和hdupool通道状态不一致。

第二次修改说明: 
hdu,eqp注册时并不代表hdu真正上线可用。应是hdu通道状态准备好时第一次发送通道状态通知消息时标志hdu上线
